link:../index.asciidoc[&larr; Docs Index] link:./index.asciidoc[ &larr; Configuration]

== Install Rewrite

Installation requirements:

* A Servlet 2.5 or 3.0+ compatible Servlet Container.
* Java 1.6+

== 1. Include Rewrite in your Project

The first step to installing link:../index.asciidoc[Rewrite] is to add the required Maven dependencies to your pom.xml file. If you are not using Maven, you may also http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.ocpsoft.rewrite%22%20AND%20a%3A%22rewrite-distribution%22[download the Rewrite distribution]
 from the Maven central repository - a list of all available versions is available http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.ocpsoft.rewrite%22%20AND%20a%3A%22rewrite-distribution%22[here]:

[source,xml]
.Add Rewrite to your maven pom.xml
----
<dependency>
   <groupId>org.ocpsoft.rewrite</groupId>
   <artifactId>rewrite-servlet</artifactId>
   <version>${rewrite.version}</version>
</dependency>

<!-- To use snapshots, you must also use the Sonatype Snapshots respository -->
<repository>
   <id>sonatype-snapshots</id>
   <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
   <releases>
      <enabled>false</enabled>
   </releases>
   <snapshots>
      <enabled>true</enabled>
   </snapshots>
</repository>
----

If you are not using maven, copy +rewrite-servlet.jar+ into the +/WEB-INF/lib+ folder of your web application. You do not need any other JARs unless you are using Rewrite link:../integration/index.asciidoc[extensions]. In the case of an EAR, ensure that you do not include Rewrite twice (once in the EAR/lib, and again in the WAR/lib), this will cause deployment errors; Rewrite dependencies should be marked as "provided" in the WAR POM.


Additionally, if you are using Servlet 2.5, or are deploying an EAR with link:http://maven.apache.org/plugins/maven-ear-plugin/examples/skinny-wars.html[skinny WARs], you will need to add the Rewrite Servlet configuration to the `WEB-INF/web.xml` file in each WAR. 

[source,xml]
.Configure Rewrite for Servlet 2.5 or EAR deployments by adding the following to `WEB-INF/web.xml`
----
<listener>
   <listener-class>org.ocpsoft.rewrite.servlet.impl.RewriteServletRequestListener</listener-class>
</listener>

<listener>
   <listener-class>org.ocpsoft.rewrite.servlet.impl.RewriteServletContextListener</listener-class>
</listener>

<filter>
   <filter-name>OCPsoft Rewrite Filter</filter-name>
   <filter-class>org.ocpsoft.rewrite.servlet.RewriteFilter</filter-class>
   <async-supported>true</async-supported>
</filter>
<filter-mapping>
   <filter-name>OCPsoft Rewrite Filter</filter-name>
   <url-pattern>/*</url-pattern>
   <dispatcher>FORWARD</dispatcher>
   <dispatcher>REQUEST</dispatcher>
   <dispatcher>INCLUDE</dispatcher>
   <dispatcher>ASYNC</dispatcher>
   <dispatcher>ERROR</dispatcher>
</filter-mapping>
----
You are now ready to configure your application.

=== 2. Create your first ConfigurationProvider

Once Rewrite is installed, you will need to describe how you would like it to 
handle events; this is done by implementing the +org.ocpsoft.rewrite.config.ConfigurationProvider+ interface.  Typically, when using Rewrite in a Servlet environment, you will want to extend from
the provided base class +org.ocpsoft.rewrite.servlet.config.HttpConfigurationProvider+.

[source,java]
.org.example.ApplicationConfigurationProvider
----
import org.ocpsoft.logging.Logger.Level;
import org.ocpsoft.rewrite.annotation.RewriteConfiguration;
import org.ocpsoft.rewrite.config.Configuration;
import org.ocpsoft.rewrite.config.ConfigurationBuilder;
import org.ocpsoft.rewrite.config.Log;
import org.ocpsoft.rewrite.servlet.config.HttpConfigurationProvider;

@RewriteConfiguration
public class ApplicationConfigurationProvider extends HttpConfigurationProvider
{
   @Override
   public Configuration getConfiguration(ServletContext context)
   {
      return ConfigurationBuilder.begin()
         .addRule()
         .perform(Log.message(Level.INFO, "Rewrite is active."))
      ; 
   }

   @Override
   public int priority()
   {
      return 0;
   }
}
----
NOTE: You will see the `Log` message for each inbound request and each time a link is sent outbound to the browser, but you will not see it in the server startup logs.

=== 3. Activate your configuration

The next step is to register your +ConfigurationProvider+ with Rewrite; you will need to add the `@RewriteAnnotation` to your `ConfigurationProvider` implementation, or list your implementation in a provider registration file. (If you have used the `@RewriteConfiguration` annotation, you may skip the rest of this section.)

The provider registration file contains the fully qualified class name of each configuration implementation that
you wish to activate in the application; one per line, and is located in the `META-INF/services` folder:

[source,text]
./META-INF/services/org.ocpsoft.rewrite.config.ConfigurationProvider
----
org.example.ApplicationConfigurationProvider
org.example.OtherConfigurationProvider
----

CAUTION: The registration file must be created in +src/main/resources/META-INF/services+, along-side your Java resources. It must *NOT* be placed in the +src/main/webapp/META-INF+ directory. (*Note:* If you do not use Maven, this file should be created in your Java source folder, such as: `src/META-INF/services`)

TIP: +ConfigurationProvider+ implementations may be placed in JAR files that are included as project dependencies. 

To register providers in a JAR file, simply use this same activation mechanism, but create a service
registration file in each JAR containing configurations. This registration file will be located at
+jar:/META-INF/org.ocpsoft.rewrite.config.ConfigurationProvider+. 

NOTE: Alternate methods of configuration are available, such as link:./annotations/index.asciidoc[Rewrite Annotations],
link:./prettyfaces/index.asciidoc[PrettyFaces XML and Annotations], and via link:../../integration/cdi.asciidoc[cdi] and 
link:../../integration/spring.asciidoc[spring]; these methods may be used to avoid the need for a provider registration file.

=== 4. Verify that your configuration is installed

Before link:./index.asciidoc[configuring Rewrite], you may wish to verify that your provider has
been properly installed and activated. To do this, start your application and look at the server output, where
you should see a summary of each active Rewrite extension, and all of your registered configuration providers:

[source,text]
----
INFO  [org.ocpsoft.rewrite.servlet.RewriteFilter] RewriteFilter starting up...
...
INFO  [org.ocpsoft.rewrite.servlet.RewriteFilter] Loaded [] org.ocpsoft.rewrite.config.ConfigurationProvider [org.example.ApplicationConfigurationProvider<0>]
INFO  [org.ocpsoft.rewrite.servlet.RewriteFilter] RewriteFilter initialized.
----

TIP: If the your +ConfigurationProvider+ does not appear in the list of active providers, double check the location
of the provider registration file, and make sure that you have correctly spelled the fully qualified name of
each provider implementation.

=== 5. Add rules to your configuration

As can be seen above, configuring Rewrite may be performed using the +ConfigurationBuilder+ class, which allows
addition of pre-constructed +Rule+ instances, as well as definition of custom rules using +Condition+, +Operation+, 
and other link:./[configuration objects]. Your configuration can be as simple or complex as you wish:

[source,java]
.Example Configuration
----
@Override
public Configuration getConfiguration(ServletContext context)
{
   // Example bookstore configuration
   return ConfigurationBuilder.begin()
         
         .addRule()
         .perform(Log.message(Log.message(Level.INFO, "Rewrite is active.")))

         // redirect to another page
         .addRule()
         .when(Direction.isInbound().and(Path.matches("/")))
         .perform(Redirect.temporary(context.getContextPath() + "/home"))

         // redirect legacy URLs to a new location
         .addRule()
         .when(Direction.isInbound()
            .and(Path.matches("/book.php").and(Query.parameterExists("isbn"))))
         .perform(Redirect.temporary(context.getContextPath() + "/book/{isbn}"))

          // Join a URL to an internal resource
         .addRule(Join.path("/year/{year}").to("/search/year.jsp"))
         
         // Join a URL to an internal resource that accepts a parameter
         .addRule(Join.path("/book/{isbn}").to("/store/book.jsp"))
   ;
}
----

=== Continue configuring

Rewrite is a highly extendable framework, and there are many pre-defined configuration options available to help achieve specialized and specific results; however, if no pre-defined configuration object exists, it is easy to create one that fills the gaps.
 
Read the link:./index.asciidoc[configuration manual] for more information on creating custom rules and rule primitives.

=== Explore Rewrite Extensions
Once you have a grasp on the basic Rewrite features, you may wish to get a bit fancier, and try out some of
the provided link:../integration/index.asciidoc[Rewrite extensions]. Of course, you can always create your own extension simply by building a
custom configuration or some configuration objects, but there may also be an existing extension that meets
your needs.

